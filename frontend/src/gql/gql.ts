/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Register($input: RegisterInput!) {\n    register(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n": types.RegisterDocument,
    "\n  query ChatsQuery {\n    chats {\n      id\n      type\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      association {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      _redisSortDate\n      recipient {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n    }\n  }\n": types.ChatsQueryDocument,
    "\n  mutation SendMessage($input: SendMessageInput!) {\n    sendMessage(input: $input) {\n      id\n    }\n  }\n": types.SendMessageDocument,
    "\n  query Collection($input: CollectionInput!) {\n    collection(input: $input) {\n      id\n      name\n      image\n      userId\n      shareLink\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      preview {\n        id\n        attachment {\n          attachment\n          id\n        }\n      }\n      users {\n        id\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      recipient {\n        id\n        createdAt\n        updatedAt\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n      }\n      shared\n      itemCount\n      permissionsMetadata {\n        write\n        read\n        configure\n      }\n    }\n  }\n": types.CollectionDocument,
    "\n  query UserCollectionsQuery($input: UserCollectionsInput!) {\n    collections(input: $input) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n": types.UserCollectionsQueryDocument,
    "\n  query GetExperiments {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n  }\n": types.GetExperimentsDocument,
    "\n  query CoreStateQuery {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n    workspaces {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          workspaceFolderId\n          shareLink\n        }\n      }\n    }\n    chats {\n      id\n      type\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      association {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      _redisSortDate\n      recipient {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n    }\n    collections(input: { filter: [ALL] }) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n    coreState {\n      name\n      release\n      hostname\n      hostnameWithProtocol\n      announcements {\n        userId\n        content\n        type\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      stats {\n        users\n        announcements\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        invites\n        inviteMilestone\n        pulse\n        pulses\n        docs\n        messages\n        chats\n        hours\n      }\n      maintenance {\n        enabled\n        message\n        statusPage\n      }\n      registrations\n      officialInstance\n      providers {\n        anilist\n        lastfm\n        mal\n      }\n      termsNoteId\n      privacyNoteId\n      features {\n        communications\n        collections\n        autoCollects\n        workspaces\n        insights\n      }\n      inviteAFriend\n      preTrustedDomains\n      hostnames\n      _redis\n      server\n      finishedSetup\n      domain\n      uptime\n      uptimeSys\n      commitVersion\n    }\n    currentUser {\n      username\n      email\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      pendingAutoCollects\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine {\n        theme {\n          dark {\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n            dark\n          }\n          light {\n            dark\n          }\n          amoled {\n            dark\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n          }\n        }\n        fluidGradient\n        gradientOffset\n        version\n        deviceSync\n        showOnProfile\n        baseTheme\n        customCSS\n      }\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n        createdAt\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n    }\n  }\n": types.CoreStateQueryDocument,
    "\n  query Weather {\n    weather {\n      temp\n      feels_like\n      temp_min\n      temp_max\n      pressure\n      humidity\n      wind_speed\n      wind_deg\n      clouds\n      visibility\n      error\n      cached\n      icon\n      main\n    }\n  }\n": types.WeatherDocument,
    "\n  query Gallery($input: GalleryInput!) {\n    gallery(input: $input) {\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n      }\n      items {\n        id\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n          avatar\n        }\n        collections {\n          id\n          name\n        }\n        starred {\n          id\n          userId\n          attachmentId\n        }\n      }\n    }\n  }\n": types.GalleryDocument,
    "\n  mutation Upload($file: File!) {\n    upload(file: $file) {\n      id\n      attachment\n    }\n  }\n": types.UploadDocument,
    "\n  query Friends {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n  }\n": types.FriendsDocument,
    "\n  query User($input: UserProfileInput!) {\n    user(input: $input) {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      badges {\n        id\n        name\n        description\n        tooltip\n        image\n        icon\n        color\n        unlocked\n        priority\n      }\n      banned\n      banner\n      description\n      friend\n      friends {\n        id\n        status\n        userId\n        friendId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        otherUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      insights\n      plan {\n        id\n        name\n        quotaMax\n        price\n        features\n        color\n        internalName\n        purchasable\n        internalFeatures\n        icon\n      }\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n      profileLayout {\n        layout {\n          columns {\n            rows {\n              name\n              id\n              props {\n                height\n                friendsOnly\n                display\n                type\n                links {\n                  name\n                  url\n                  color\n                }\n                children {\n                  name\n                  id\n                  props {\n                    height\n                    friendsOnly\n                    display\n                    type\n                    links {\n                      name\n                      url\n                      color\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        config {\n          containerMargin\n          showStatsSidebar\n        }\n        version\n      }\n      publicProfile\n      quota\n      stats {\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        pulse\n        pulses\n        docs\n      }\n      xp\n    }\n  }\n": types.UserDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input)\n  }\n": types.UpdateUserDocument,
    "\n  query GetUserQuery {\n    currentUser {\n      username\n      email\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine {\n        theme {\n          dark {\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n            dark\n          }\n          light {\n            dark\n          }\n          amoled {\n            dark\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n          }\n        }\n        fluidGradient\n        gradientOffset\n        version\n        deviceSync\n        showOnProfile\n        baseTheme\n        customCSS\n      }\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n    }\n  }\n": types.GetUserQueryDocument,
    "\n  mutation CreateNote($input: CreateNoteInput!) {\n    createNote(input: $input) {\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n      permissions {\n        modify\n        read\n        configure\n      }\n    }\n  }\n": types.CreateNoteDocument,
    "\n  mutation CreateWorkspace($input: String!) {\n    createWorkspace(input: $input) {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          data {\n            version\n            blocks\n            time\n          }\n          metadata {\n            version\n          }\n          workspaceFolderId\n          shareLink\n          versions {\n            id\n            noteId\n            userId\n          }\n          permissions {\n            modify\n            read\n            configure\n          }\n        }\n        workspace {\n          id\n          name\n          userId\n          createdAt\n          updatedAt\n          icon\n        }\n      }\n      users {\n        id\n        createdAt\n        updatedAt\n        workspaceId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n    }\n  }\n": types.CreateWorkspaceDocument,
    "\n  query Note($input: NoteInput!) {\n    note(input: $input) {\n      permissions {\n        modify\n        read\n        configure\n      }\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n    }\n  }\n": types.NoteDocument,
    "\n  mutation SaveNote($input: SaveNoteInput!) {\n    saveNote(input: $input) {\n      id\n      name\n      workspaceFolderId\n    }\n  }\n": types.SaveNoteDocument,
    "\n  mutation ToggleNoteShare($input: Int!) {\n    toggleNoteShare(input: $input) {\n      shareLink\n    }\n  }\n": types.ToggleNoteShareDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Register($input: RegisterInput!) {\n    register(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Register($input: RegisterInput!) {\n    register(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChatsQuery {\n    chats {\n      id\n      type\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      association {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      _redisSortDate\n      recipient {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n    }\n  }\n"): (typeof documents)["\n  query ChatsQuery {\n    chats {\n      id\n      type\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      association {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      _redisSortDate\n      recipient {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendMessage($input: SendMessageInput!) {\n    sendMessage(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation SendMessage($input: SendMessageInput!) {\n    sendMessage(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Collection($input: CollectionInput!) {\n    collection(input: $input) {\n      id\n      name\n      image\n      userId\n      shareLink\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      preview {\n        id\n        attachment {\n          attachment\n          id\n        }\n      }\n      users {\n        id\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      recipient {\n        id\n        createdAt\n        updatedAt\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n      }\n      shared\n      itemCount\n      permissionsMetadata {\n        write\n        read\n        configure\n      }\n    }\n  }\n"): (typeof documents)["\n  query Collection($input: CollectionInput!) {\n    collection(input: $input) {\n      id\n      name\n      image\n      userId\n      shareLink\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      preview {\n        id\n        attachment {\n          attachment\n          id\n        }\n      }\n      users {\n        id\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      recipient {\n        id\n        createdAt\n        updatedAt\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n      }\n      shared\n      itemCount\n      permissionsMetadata {\n        write\n        read\n        configure\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserCollectionsQuery($input: UserCollectionsInput!) {\n    collections(input: $input) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserCollectionsQuery($input: UserCollectionsInput!) {\n    collections(input: $input) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetExperiments {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetExperiments {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CoreStateQuery {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n    workspaces {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          workspaceFolderId\n          shareLink\n        }\n      }\n    }\n    chats {\n      id\n      type\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      association {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      _redisSortDate\n      recipient {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n    }\n    collections(input: { filter: [ALL] }) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n    coreState {\n      name\n      release\n      hostname\n      hostnameWithProtocol\n      announcements {\n        userId\n        content\n        type\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      stats {\n        users\n        announcements\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        invites\n        inviteMilestone\n        pulse\n        pulses\n        docs\n        messages\n        chats\n        hours\n      }\n      maintenance {\n        enabled\n        message\n        statusPage\n      }\n      registrations\n      officialInstance\n      providers {\n        anilist\n        lastfm\n        mal\n      }\n      termsNoteId\n      privacyNoteId\n      features {\n        communications\n        collections\n        autoCollects\n        workspaces\n        insights\n      }\n      inviteAFriend\n      preTrustedDomains\n      hostnames\n      _redis\n      server\n      finishedSetup\n      domain\n      uptime\n      uptimeSys\n      commitVersion\n    }\n    currentUser {\n      username\n      email\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      pendingAutoCollects\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine {\n        theme {\n          dark {\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n            dark\n          }\n          light {\n            dark\n          }\n          amoled {\n            dark\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n          }\n        }\n        fluidGradient\n        gradientOffset\n        version\n        deviceSync\n        showOnProfile\n        baseTheme\n        customCSS\n      }\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n        createdAt\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query CoreStateQuery {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n    workspaces {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          workspaceFolderId\n          shareLink\n        }\n      }\n    }\n    chats {\n      id\n      type\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      association {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        lastRead\n        notifications\n        legacyUserId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      _redisSortDate\n      recipient {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n    }\n    collections(input: { filter: [ALL] }) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n    coreState {\n      name\n      release\n      hostname\n      hostnameWithProtocol\n      announcements {\n        userId\n        content\n        type\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      stats {\n        users\n        announcements\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        invites\n        inviteMilestone\n        pulse\n        pulses\n        docs\n        messages\n        chats\n        hours\n      }\n      maintenance {\n        enabled\n        message\n        statusPage\n      }\n      registrations\n      officialInstance\n      providers {\n        anilist\n        lastfm\n        mal\n      }\n      termsNoteId\n      privacyNoteId\n      features {\n        communications\n        collections\n        autoCollects\n        workspaces\n        insights\n      }\n      inviteAFriend\n      preTrustedDomains\n      hostnames\n      _redis\n      server\n      finishedSetup\n      domain\n      uptime\n      uptimeSys\n      commitVersion\n    }\n    currentUser {\n      username\n      email\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      pendingAutoCollects\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine {\n        theme {\n          dark {\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n            dark\n          }\n          light {\n            dark\n          }\n          amoled {\n            dark\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n          }\n        }\n        fluidGradient\n        gradientOffset\n        version\n        deviceSync\n        showOnProfile\n        baseTheme\n        customCSS\n      }\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n        createdAt\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Weather {\n    weather {\n      temp\n      feels_like\n      temp_min\n      temp_max\n      pressure\n      humidity\n      wind_speed\n      wind_deg\n      clouds\n      visibility\n      error\n      cached\n      icon\n      main\n    }\n  }\n"): (typeof documents)["\n  query Weather {\n    weather {\n      temp\n      feels_like\n      temp_min\n      temp_max\n      pressure\n      humidity\n      wind_speed\n      wind_deg\n      clouds\n      visibility\n      error\n      cached\n      icon\n      main\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Gallery($input: GalleryInput!) {\n    gallery(input: $input) {\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n      }\n      items {\n        id\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n          avatar\n        }\n        collections {\n          id\n          name\n        }\n        starred {\n          id\n          userId\n          attachmentId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Gallery($input: GalleryInput!) {\n    gallery(input: $input) {\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n      }\n      items {\n        id\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n          avatar\n        }\n        collections {\n          id\n          name\n        }\n        starred {\n          id\n          userId\n          attachmentId\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Upload($file: File!) {\n    upload(file: $file) {\n      id\n      attachment\n    }\n  }\n"): (typeof documents)["\n  mutation Upload($file: File!) {\n    upload(file: $file) {\n      id\n      attachment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Friends {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query Friends {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query User($input: UserProfileInput!) {\n    user(input: $input) {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      badges {\n        id\n        name\n        description\n        tooltip\n        image\n        icon\n        color\n        unlocked\n        priority\n      }\n      banned\n      banner\n      description\n      friend\n      friends {\n        id\n        status\n        userId\n        friendId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        otherUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      insights\n      plan {\n        id\n        name\n        quotaMax\n        price\n        features\n        color\n        internalName\n        purchasable\n        internalFeatures\n        icon\n      }\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n      profileLayout {\n        layout {\n          columns {\n            rows {\n              name\n              id\n              props {\n                height\n                friendsOnly\n                display\n                type\n                links {\n                  name\n                  url\n                  color\n                }\n                children {\n                  name\n                  id\n                  props {\n                    height\n                    friendsOnly\n                    display\n                    type\n                    links {\n                      name\n                      url\n                      color\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        config {\n          containerMargin\n          showStatsSidebar\n        }\n        version\n      }\n      publicProfile\n      quota\n      stats {\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        pulse\n        pulses\n        docs\n      }\n      xp\n    }\n  }\n"): (typeof documents)["\n  query User($input: UserProfileInput!) {\n    user(input: $input) {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      badges {\n        id\n        name\n        description\n        tooltip\n        image\n        icon\n        color\n        unlocked\n        priority\n      }\n      banned\n      banner\n      description\n      friend\n      friends {\n        id\n        status\n        userId\n        friendId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        otherUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      insights\n      plan {\n        id\n        name\n        quotaMax\n        price\n        features\n        color\n        internalName\n        purchasable\n        internalFeatures\n        icon\n      }\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n      profileLayout {\n        layout {\n          columns {\n            rows {\n              name\n              id\n              props {\n                height\n                friendsOnly\n                display\n                type\n                links {\n                  name\n                  url\n                  color\n                }\n                children {\n                  name\n                  id\n                  props {\n                    height\n                    friendsOnly\n                    display\n                    type\n                    links {\n                      name\n                      url\n                      color\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        config {\n          containerMargin\n          showStatsSidebar\n        }\n        version\n      }\n      publicProfile\n      quota\n      stats {\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        pulse\n        pulses\n        docs\n      }\n      xp\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserQuery {\n    currentUser {\n      username\n      email\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine {\n        theme {\n          dark {\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n            dark\n          }\n          light {\n            dark\n          }\n          amoled {\n            dark\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n          }\n        }\n        fluidGradient\n        gradientOffset\n        version\n        deviceSync\n        showOnProfile\n        baseTheme\n        customCSS\n      }\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserQuery {\n    currentUser {\n      username\n      email\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine {\n        theme {\n          dark {\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n            dark\n          }\n          light {\n            dark\n          }\n          amoled {\n            dark\n            colors {\n              primary\n              logo1\n              logo2\n              secondary\n              accent\n              error\n              info\n              success\n              warning\n              card\n              toolbar\n              sheet\n              text\n              dark\n              gold\n              background\n              background2\n            }\n          }\n        }\n        fluidGradient\n        gradientOffset\n        version\n        deviceSync\n        showOnProfile\n        baseTheme\n        customCSS\n      }\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateNote($input: CreateNoteInput!) {\n    createNote(input: $input) {\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n      permissions {\n        modify\n        read\n        configure\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateNote($input: CreateNoteInput!) {\n    createNote(input: $input) {\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n      permissions {\n        modify\n        read\n        configure\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWorkspace($input: String!) {\n    createWorkspace(input: $input) {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          data {\n            version\n            blocks\n            time\n          }\n          metadata {\n            version\n          }\n          workspaceFolderId\n          shareLink\n          versions {\n            id\n            noteId\n            userId\n          }\n          permissions {\n            modify\n            read\n            configure\n          }\n        }\n        workspace {\n          id\n          name\n          userId\n          createdAt\n          updatedAt\n          icon\n        }\n      }\n      users {\n        id\n        createdAt\n        updatedAt\n        workspaceId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWorkspace($input: String!) {\n    createWorkspace(input: $input) {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          data {\n            version\n            blocks\n            time\n          }\n          metadata {\n            version\n          }\n          workspaceFolderId\n          shareLink\n          versions {\n            id\n            noteId\n            userId\n          }\n          permissions {\n            modify\n            read\n            configure\n          }\n        }\n        workspace {\n          id\n          name\n          userId\n          createdAt\n          updatedAt\n          icon\n        }\n      }\n      users {\n        id\n        createdAt\n        updatedAt\n        workspaceId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Note($input: NoteInput!) {\n    note(input: $input) {\n      permissions {\n        modify\n        read\n        configure\n      }\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n    }\n  }\n"): (typeof documents)["\n  query Note($input: NoteInput!) {\n    note(input: $input) {\n      permissions {\n        modify\n        read\n        configure\n      }\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveNote($input: SaveNoteInput!) {\n    saveNote(input: $input) {\n      id\n      name\n      workspaceFolderId\n    }\n  }\n"): (typeof documents)["\n  mutation SaveNote($input: SaveNoteInput!) {\n    saveNote(input: $input) {\n      id\n      name\n      workspaceFolderId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ToggleNoteShare($input: Int!) {\n    toggleNoteShare(input: $input) {\n      shareLink\n    }\n  }\n"): (typeof documents)["\n  mutation ToggleNoteShare($input: Int!) {\n    toggleNoteShare(input: $input) {\n      shareLink\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;